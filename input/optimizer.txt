/**; ModuleID = 'test.c'
source_filename = "test.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca float, align 4
  %2 = alloca i32, align 4
  store float 1.000000e+01, float* %1, align 4
  %3 = load float, float* %1, align 4
  %4 = fpext float %3 to double
  %5 = fadd double 5.000000e+00, %4
  %6 = fptosi double %5 to i32
  store i32 %6, i32* %2, align 4
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}

* This program tests the optimization visitor by constant folding and constant propagation
*/

// Tests constant folding

int i = 5;
i = 10 + -15 * 20 / 5 + 30 * -(-1000 + 999.5);

// Tests constant propagation

int five = 5; // Declare and initialize five
int b = 5 + five; // Should be constant propagated and folded to 10
int c = + (b + five)*15 - 20; // Should get propagated and folded to a literal
c = 4;
// Reassign c to something else, there is no reaching definition of c anymore so no propagation is done
// From now on anymore
int not_propagated = c + 2; // This will not be propagated due to the reaching definition principle